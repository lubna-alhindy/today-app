// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model UserCollection {
  id           String                   @id @default(cuid())
  role         UserCollectionRoleType   @default(developer)
  status       UserCollectionStatusType @default(pending)
  createdAt    DateTime?
  updatedAt    DateTime?
  user         User?                    @relation("UserCollection_user", fields: [userId], references: [id])
  userId       String?                  @map("user")
  collection   Collection?              @relation("UserCollection_collection", fields: [collectionId], references: [id])
  collectionId String?                  @map("collection")
  createdBy    User?                    @relation("UserCollection_createdBy", fields: [createdById], references: [id])
  createdById  String?                  @map("createdBy")
  updatedBy    User?                    @relation("UserCollection_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?                  @map("updatedBy")

  @@index([userId])
  @@index([collectionId])
  @@index([createdById])
  @@index([updatedById])
}

model Collection {
  id              String           @id @default(cuid())
  name            String           @default("")
  createdAt       DateTime?
  updatedAt       DateTime?
  userCollections UserCollection[] @relation("UserCollection_collection")
  tasks           Task[]           @relation("Task_collection")
  createdBy       User?            @relation("Collection_createdBy", fields: [createdById], references: [id])
  createdById     String?          @map("createdBy")
  updatedBy       User?            @relation("Collection_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?          @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model UserTask {
  id          String    @id @default(cuid())
  createdAt   DateTime?
  user        User?     @relation("UserTask_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  task        Task?     @relation("UserTask_task", fields: [taskId], references: [id])
  taskId      String?   @map("task")
  createdBy   User?     @relation("UserTask_createdBy", fields: [createdById], references: [id])
  createdById String?   @map("createdBy")

  @@index([userId])
  @@index([taskId])
  @@index([createdById])
}

model Task {
  id           String            @id @default(cuid())
  title        String            @default("")
  description  String            @default("")
  deadline     DateTime
  priority     TaskPriorityType? @default(medium)
  status       TaskStatusType?   @default(todo)
  createdAt    DateTime?
  updatedAt    DateTime?
  userTasks    UserTask[]        @relation("UserTask_task")
  collection   Collection?       @relation("Task_collection", fields: [collectionId], references: [id])
  collectionId String?           @map("collection")
  createdBy    User?             @relation("Task_createdBy", fields: [createdById], references: [id])
  createdById  String?           @map("createdBy")
  updatedBy    User?             @relation("Task_updatedBy", fields: [updatedById], references: [id])
  updatedById  String?           @map("updatedBy")

  @@index([collectionId])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                            String           @id @default(cuid())
  role                          UserRoleType     @default(user)
  name                          String           @default("")
  email                         String           @unique @default("")
  password                      String
  createdAt                     DateTime?
  updatedAt                     DateTime?
  userCollections               UserCollection[] @relation("UserCollection_user")
  userTasks                     UserTask[]       @relation("UserTask_user")
  passwordResetToken            String?
  passwordResetIssuedAt         DateTime?
  passwordResetRedeemedAt       DateTime?
  magicAuthToken                String?
  magicAuthIssuedAt             DateTime?
  magicAuthRedeemedAt           DateTime?
  from_UserCollection_createdBy UserCollection[] @relation("UserCollection_createdBy")
  from_UserCollection_updatedBy UserCollection[] @relation("UserCollection_updatedBy")
  from_Collection_createdBy     Collection[]     @relation("Collection_createdBy")
  from_Collection_updatedBy     Collection[]     @relation("Collection_updatedBy")
  from_UserTask_createdBy       UserTask[]       @relation("UserTask_createdBy")
  from_Task_createdBy           Task[]           @relation("Task_createdBy")
  from_Task_updatedBy           Task[]           @relation("Task_updatedBy")
}

enum UserCollectionRoleType {
  admin
  developer
  watcher
}

enum UserCollectionStatusType {
  pending
  accepted
  rejected
}

enum TaskPriorityType {
  low
  medium
  high
}

enum TaskStatusType {
  todo
  inprogress
  complete
}

enum UserRoleType {
  admin
  user
}
