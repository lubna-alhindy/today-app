# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type UserCollection {
  id: ID!
  role: UserCollectionRoleType
  status: UserCollectionStatusType
  createdAt: DateTime
  updatedAt: DateTime
  user: User
  collection: Collection
  createdBy: User
  updatedBy: User
}

enum UserCollectionRoleType {
  admin
  developer
  watcher
}

enum UserCollectionStatusType {
  pending
  accepted
  rejected
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserCollectionWhereUniqueInput {
  id: ID
}

input UserCollectionWhereInput {
  AND: [UserCollectionWhereInput!]
  OR: [UserCollectionWhereInput!]
  NOT: [UserCollectionWhereInput!]
  id: IDFilter
  role: UserCollectionRoleTypeNullableFilter
  status: UserCollectionStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  collection: CollectionWhereInput
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input UserCollectionRoleTypeNullableFilter {
  equals: UserCollectionRoleType
  in: [UserCollectionRoleType!]
  notIn: [UserCollectionRoleType!]
  not: UserCollectionRoleTypeNullableFilter
}

input UserCollectionStatusTypeNullableFilter {
  equals: UserCollectionStatusType
  in: [UserCollectionStatusType!]
  notIn: [UserCollectionStatusType!]
  not: UserCollectionStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserCollectionOrderByInput {
  id: OrderDirection
  role: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserCollectionUpdateInput {
  role: UserCollectionRoleType
  status: UserCollectionStatusType
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForUpdateInput
  collection: CollectionRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CollectionRelateToOneForUpdateInput {
  create: CollectionCreateInput
  connect: CollectionWhereUniqueInput
  disconnect: Boolean
}

input UserCollectionUpdateArgs {
  where: UserCollectionWhereUniqueInput!
  data: UserCollectionUpdateInput!
}

input UserCollectionCreateInput {
  role: UserCollectionRoleType
  status: UserCollectionStatusType
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForCreateInput
  collection: CollectionRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input CollectionRelateToOneForCreateInput {
  create: CollectionCreateInput
  connect: CollectionWhereUniqueInput
}

type Collection {
  id: ID!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userCollections(where: UserCollectionWhereInput! = {}, orderBy: [UserCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserCollectionWhereUniqueInput): [UserCollection!]
  userCollectionsCount(where: UserCollectionWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskWhereUniqueInput): [Task!]
  tasksCount(where: TaskWhereInput! = {}): Int
  createdBy: User
  updatedBy: User
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userCollections: UserCollectionManyRelationFilter
  tasks: TaskManyRelationFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserCollectionManyRelationFilter {
  every: UserCollectionWhereInput
  some: UserCollectionWhereInput
  none: UserCollectionWhereInput
}

input TaskManyRelationFilter {
  every: TaskWhereInput
  some: TaskWhereInput
  none: TaskWhereInput
}

input CollectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionUpdateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userCollections: UserCollectionRelateToManyForUpdateInput
  tasks: TaskRelateToManyForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserCollectionRelateToManyForUpdateInput {
  disconnect: [UserCollectionWhereUniqueInput!]
  set: [UserCollectionWhereUniqueInput!]
  create: [UserCollectionCreateInput!]
  connect: [UserCollectionWhereUniqueInput!]
}

input TaskRelateToManyForUpdateInput {
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userCollections: UserCollectionRelateToManyForCreateInput
  tasks: TaskRelateToManyForCreateInput
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserCollectionRelateToManyForCreateInput {
  create: [UserCollectionCreateInput!]
  connect: [UserCollectionWhereUniqueInput!]
}

input TaskRelateToManyForCreateInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

type UserTask {
  id: ID!
  createdAt: DateTime
  user: User
  task: Task
  createdBy: User
}

input UserTaskWhereUniqueInput {
  id: ID
}

input UserTaskWhereInput {
  AND: [UserTaskWhereInput!]
  OR: [UserTaskWhereInput!]
  NOT: [UserTaskWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  user: UserWhereInput
  task: TaskWhereInput
  createdBy: UserWhereInput
}

input UserTaskOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input UserTaskUpdateInput {
  createdAt: DateTime
  user: UserRelateToOneForUpdateInput
  task: TaskRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input UserTaskUpdateArgs {
  where: UserTaskWhereUniqueInput!
  data: UserTaskUpdateInput!
}

input UserTaskCreateInput {
  createdAt: DateTime
  user: UserRelateToOneForCreateInput
  task: TaskRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

type Task {
  id: ID!
  title: String
  description: String
  deadline: DateTime
  priority: TaskPriorityType
  status: TaskStatusType
  createdAt: DateTime
  updatedAt: DateTime
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserTaskWhereUniqueInput): [UserTask!]
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  collection: Collection
  createdBy: User
  updatedBy: User
}

enum TaskPriorityType {
  low
  medium
  high
}

enum TaskStatusType {
  todo
  inprogress
  complete
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  deadline: DateTimeFilter
  priority: TaskPriorityTypeNullableFilter
  status: TaskStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userTasks: UserTaskManyRelationFilter
  collection: CollectionWhereInput
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input TaskPriorityTypeNullableFilter {
  equals: TaskPriorityType
  in: [TaskPriorityType!]
  notIn: [TaskPriorityType!]
  not: TaskPriorityTypeNullableFilter
}

input TaskStatusTypeNullableFilter {
  equals: TaskStatusType
  in: [TaskStatusType!]
  notIn: [TaskStatusType!]
  not: TaskStatusTypeNullableFilter
}

input UserTaskManyRelationFilter {
  every: UserTaskWhereInput
  some: UserTaskWhereInput
  none: UserTaskWhereInput
}

input TaskOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  deadline: OrderDirection
  priority: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TaskUpdateInput {
  title: String
  description: String
  deadline: DateTime
  priority: TaskPriorityType
  status: TaskStatusType
  createdAt: DateTime
  updatedAt: DateTime
  userTasks: UserTaskRelateToManyForUpdateInput
  collection: CollectionRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserTaskRelateToManyForUpdateInput {
  disconnect: [UserTaskWhereUniqueInput!]
  set: [UserTaskWhereUniqueInput!]
  create: [UserTaskCreateInput!]
  connect: [UserTaskWhereUniqueInput!]
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  title: String
  description: String
  deadline: DateTime
  priority: TaskPriorityType
  status: TaskStatusType
  createdAt: DateTime
  updatedAt: DateTime
  userTasks: UserTaskRelateToManyForCreateInput
  collection: CollectionRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserTaskRelateToManyForCreateInput {
  create: [UserTaskCreateInput!]
  connect: [UserTaskWhereUniqueInput!]
}

type User {
  id: ID!
  role: UserRoleType
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  updatedAt: DateTime
  userCollections(where: UserCollectionWhereInput! = {}, orderBy: [UserCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserCollectionWhereUniqueInput): [UserCollection!]
  userCollectionsCount(where: UserCollectionWhereInput! = {}): Int
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserTaskWhereUniqueInput): [UserTask!]
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

enum UserRoleType {
  admin
  user
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  role: UserRoleTypeNullableFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userCollections: UserCollectionManyRelationFilter
  userTasks: UserTaskManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  role: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  role: UserRoleType
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
  userCollections: UserCollectionRelateToManyForUpdateInput
  userTasks: UserTaskRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  role: UserRoleType
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
  userCollections: UserCollectionRelateToManyForCreateInput
  userTasks: UserTaskRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUserCollection(data: UserCollectionCreateInput!): UserCollection
  createUserCollections(data: [UserCollectionCreateInput!]!): [UserCollection]
  updateUserCollection(where: UserCollectionWhereUniqueInput!, data: UserCollectionUpdateInput!): UserCollection
  updateUserCollections(data: [UserCollectionUpdateArgs!]!): [UserCollection]
  deleteUserCollection(where: UserCollectionWhereUniqueInput!): UserCollection
  deleteUserCollections(where: [UserCollectionWhereUniqueInput!]!): [UserCollection]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(where: CollectionWhereUniqueInput!, data: CollectionUpdateInput!): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createUserTask(data: UserTaskCreateInput!): UserTask
  createUserTasks(data: [UserTaskCreateInput!]!): [UserTask]
  updateUserTask(where: UserTaskWhereUniqueInput!, data: UserTaskUpdateInput!): UserTask
  updateUserTasks(data: [UserTaskUpdateArgs!]!): [UserTask]
  deleteUserTask(where: UserTaskWhereUniqueInput!): UserTask
  deleteUserTasks(where: [UserTaskWhereUniqueInput!]!): [UserTask]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(email: String!, token: String!): RedeemUserMagicAuthTokenResult!
  joinCollection(collectionId: ID!): UserCollection
  approveJoinCollectionRequest(userCollectionId: ID!): UserCollection
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union RedeemUserMagicAuthTokenResult = RedeemUserMagicAuthTokenSuccess | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  userCollections(where: UserCollectionWhereInput! = {}, orderBy: [UserCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserCollectionWhereUniqueInput): [UserCollection!]
  userCollection(where: UserCollectionWhereUniqueInput!): UserCollection
  userCollectionsCount(where: UserCollectionWhereInput! = {}): Int
  collections(where: CollectionWhereInput! = {}, orderBy: [CollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollectionWhereUniqueInput): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  userTasks(where: UserTaskWhereInput! = {}, orderBy: [UserTaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserTaskWhereUniqueInput): [UserTask!]
  userTask(where: UserTaskWhereUniqueInput!): UserTask
  userTasksCount(where: UserTaskWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskWhereUniqueInput): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
